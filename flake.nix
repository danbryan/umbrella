# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.10)
{

  # Flake inputs
  inputs = {
    flake-compat.url = "https://flakehub.com/f/edolstra/flake-compat/*.tar.gz";

    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*.tar.gz";

    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*.tar.gz";

    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  # Flake outputs that other flakes can use
  outputs = { self, flake-compat, flake-schemas, nixpkgs, rust-overlay }:
    let
      # Nixpkgs overlays
      overlays = [
        rust-overlay.overlays.default
        (final: prev: {
          rustToolchain = final.rust-bin.stable.latest.default;
        })
      ];

      # Helpers for producing system-specific outputs
      supportedSystems = [ "x86_64-linux" "aarch64-darwin" "x86_64-darwin" "aarch64-linux" ];
      forEachSupportedSystem = f: nixpkgs.lib.genAttrs supportedSystems (system: f {
        pkgs = import nixpkgs { inherit overlays system; };
      });
    in {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      # The package
      packages = forEachSupportedSystem ({ pkgs }: {
        default =
          ((let rustVersion = pkgs.rust-bin.stable.latest.default;
            in pkgs.makeRustPlatform {
              cargo = rustVersion;
              rustc = rustVersion;
            }).buildRustPackage {
          pname = "umbrella";
          version = "0.1.0";
          src = ./.;
          cargoSha256 = "";
          cargoLock.lockFile = ./Cargo.lock;
          cargoLock.outputHashes = {
            "decaf377-fmd-0.79.0-alpha.1" = "sha256-sLN6SmM4QyewLLqQhHL3UKV9TuAT1NbtAPkq0/50cLQ=";
            "f4jumble-0.0.0" = "sha256-Zc07fVIPuGVq6gUW1OOehr7HkcCBNUPYNh7POmRECrE=";
          };
        }).overrideAttrs (_: { doCheck = false; }); # Disable tests to improve build times
      });

      # Development environments
      devShells = forEachSupportedSystem ({ pkgs }: {
        default = pkgs.mkShell {
          # Pinned packages available in the environment
          packages = with pkgs; [
            rustToolchain
            cargo-bloat
            cargo-edit
            cargo-outdated
            cargo-udeps
            cargo-watch
          ];

          # Environment variables
          env = {
            RUST_BACKTRACE = "1";
          };
        };
      });
    };
}
